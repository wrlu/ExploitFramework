package com.wrlus.expfwk.cmd.control;

import android.app.Service;
import android.content.*;
import android.net.Uri;
import android.os.IBinder;
import android.os.RemoteException;

import com.huawei.android.hms.ppskit.IPPSInstallationService;
import com.huawei.android.hms.ppskit.IPPSInstallationServiceCallback;
import com.huawei.android.hms.ppskit.RemoteInstallReq;
import com.wrlus.expfwk.cmd.Task;
import com.wrlus.expfwk.env.Env;
import com.wrlus.expfwk.utils.LogUtil;

public class PPSTask extends Task {
    private static final String TAG = "PPSTask";
    private static final String PPS_VERSION = "3.4.52.303";
    private static RemoteInstallReq getRemoteInstallReq() {
        return new RemoteInstallReq(
                "1", PPS_VERSION, "com.wrlus.test", "", null, 1);
    }

    private final String params;

    public PPSTask(String params) {
        this.params = params;
    }

    @Override
    public void doTask() {
        String apkPath = "base.apk";
        if (!params.trim().equals("")) {
            apkPath = params;
        }
        Context context = Env.getSystemContext();
        if (context == null) {
            LogUtil.e(TAG, "Context is null.");
            return;
        }

        ppsInstall(context, apkPath);
    }

    public static void directCall() {
        new PPSTask("test.apk").doTask();
    }

    private void ppsInstall(Context context, String apkPath) {
        if (!apkPath.endsWith(".apk")) {
            LogUtil.e(TAG, "APK file name must end with .apk");
            return;
        }
        final RemoteInstallReq req = getRemoteInstallReq();

        final Uri apkFileUri = Uri.parse("content://com.huawei.fastapp.fileprovider/external/" + apkPath);

        context.grantUriPermission("com.huawei.hwid", apkFileUri,
                Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        ServiceConnection sc = new ServiceConnection() {
            @Override
            public void onServiceConnected(ComponentName name, IBinder service) {
                IPPSInstallationService remote = IPPSInstallationService.Stub.asInterface(service);
                try {
                    remote.install(req, apkFileUri, new PpsCallback());
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onServiceDisconnected(ComponentName name) {

            }
        };

        Intent intent = new Intent();
        intent.setClassName("com.huawei.hwid",
                "com.huawei.android.hms.ppskit.PpsInstallationService");
        intent.setAction("com.huawei.openalliance.ad.INSTALL_SERVICE");
        context.bindService(intent, sc, Service.BIND_AUTO_CREATE);
    }

    static final class PpsCallback extends IPPSInstallationServiceCallback.Stub {

        @Override
        public void onFinish(boolean status, int code) {
            String message;
            if (status) {
                message = "Success";
            } else {
                String errMsg;
                if (code == 2) {
                    errMsg = "no such file or directory (error code 2).";
                } else if (code == 3) {
                    errMsg = "app not in whitelist (error code 3).";
                } else {
                    errMsg = "(error code " + code + ")";
                }
                message = "Failed, reason is " + errMsg;
            }
            LogUtil.i(TAG, message);
        }
    }
}
