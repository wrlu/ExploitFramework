package com.wrlus.expfwk.cmd;

import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.PermissionGroupInfo;
import android.content.pm.PermissionInfo;
import android.os.IBinder;

import com.wrlus.expfwk.utils.ContextUtil;
import com.wrlus.expfwk.utils.LogUtil;
import com.wrlus.hiddenapireflector.reflector.android.os.ServiceManager;

import java.lang.reflect.Method;
import java.util.List;

public class PermissionTask extends Task {
    private static final String TAG = "PermissionTask";

    @Override
    public void doTask(String parameterFilePath) {
        IBinder permissionMgr = ServiceManager.getService("permissionmgr");
        Context context = ContextUtil.getContext();
        List<PermissionGroupInfo> groupInfos = getAllPermissionGroups(permissionMgr, 3);
        for (PermissionGroupInfo groupInfo : groupInfos) {
            List<PermissionInfo> permissionInfos =
                    queryPermissionsByGroup(permissionMgr, groupInfo.name, 3);
            for (PermissionInfo permissionInfo : permissionInfos) {
                if (context.checkSelfPermission(permissionInfo.name)
                        == PackageManager.PERMISSION_GRANTED) {
                    LogUtil.i(TAG, permissionInfo.name);
                }
            }
        }
    }

    public List<PermissionGroupInfo> getAllPermissionGroups(IBinder permissionMgr, int flags) {
        try {
            Method asInterface = Class.forName("android.permission.IPermissionManager$Stub")
                    .getDeclaredMethod("asInterface", IBinder.class);
            Object permissionMgrInterface = asInterface.invoke(null, permissionMgr);
            Method getAllPermissionGroupsMethod = permissionMgrInterface.getClass()
                    .getDeclaredMethod("getAllPermissionGroups", int.class);
            Object result =
                    getAllPermissionGroupsMethod.invoke(permissionMgrInterface, flags);
            Method getListMethod = Class.forName("android.content.pm.ParceledListSlice")
                    .getMethod("getList");
           return (List<PermissionGroupInfo>) getListMethod.invoke(result);
        } catch (ReflectiveOperationException e) {
            e.printStackTrace();
        }
        return null;
    }

    public List<PermissionInfo> queryPermissionsByGroup(IBinder permissionMgr,
                                                        String groupName, int flags) {
        try {
            Method asInterface = Class.forName("android.permission.IPermissionManager$Stub")
                    .getDeclaredMethod("asInterface", IBinder.class);
            Object permissionMgrInterface = asInterface.invoke(null, permissionMgr);
            Method getAllPermissionGroupsMethod = permissionMgrInterface.getClass()
                    .getDeclaredMethod("queryPermissionsByGroup", String.class, int.class);
            Object result =
                    getAllPermissionGroupsMethod.invoke(permissionMgrInterface, groupName, flags);
            Method getListMethod = Class.forName("android.content.pm.ParceledListSlice")
                    .getMethod("getList");
            return (List<PermissionInfo>) getListMethod.invoke(result);
        } catch (ReflectiveOperationException e) {
            e.printStackTrace();
        }
        return null;
    }
}