package com.wrlus.expfwk.cmd;

import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.wrlus.expfwk.utils.LogUtil;
import org.json.JSONException;
import org.json.JSONObject;

public abstract class Task {
    private static final String TAG = "Task";
    private static final Pattern pattern = Pattern.compile("(\\S*)\\s*(.*)");

    public static final String EXIT_TASK = "exit";
    public static final String QUIT_TASK = "quit";
    public static final String HELP_TASK = "help";
//    Show info of current process (uid, pid and UserHandle).
    public static final String INFO_TASK = "info";
//    List all granted permission.
    public static final String PERMISSION_TASK = "permission";
//    Install apk ./base.apk, needs INSTALL_PACKAGES permission.
    public static final String INSTALL_APK_TASK = "installapk";
    public static final String INSTALL_PACKAGE_TASK = "installpackage";
//    Read SMS, needs READ_SMS permission. (Cannot read auth codes & OTPs on some China ROMs)
    public static final String READ_SMS = "readsms";
//    Read Call Log, needs READ_CALL_LOG permission.
    public static final String READ_CALL_LOG = "readcalllog";
//
    public static final String CONTENT = "content";
//    List all installed packages.
    public static final String READ_APP_LIST = "package";

    public abstract void doTask();

    public static String[] resolveCmdAndParams(String input) {
        Matcher matcher = pattern.matcher(input);
        if (matcher.find()) {
            if (matcher.groupCount() == 2) {
                return new String[] { matcher.group(1), matcher.group(2) };
            } else if (matcher.groupCount() == 1) {
                return new String[] { matcher.group(1), null };
            }
        }
        return null;
    }

    public static JSONObject parseParams(String params) {
        if (params == null || params.equals("")) {
            return new JSONObject();
        }
        if (params.startsWith("--jsonfile")) {
            try {
                String[] cmdAndParams = resolveCmdAndParams(params);
                if (cmdAndParams == null) {
                    LogUtil.e(TAG, "Invalid parameters: No JSON file specified.");
                    return null;
                }
                String jsonFile = cmdAndParams[1];
                if (jsonFile == null) {
                    LogUtil.e(TAG, "Invalid parameters: No JSON file specified.");
                    return null;
                }
                BufferedReader reader = new BufferedReader(new FileReader(jsonFile));
                StringBuilder jsonStr = new StringBuilder();
                String str = reader.readLine();
                while (str != null) {
                    jsonStr.append(str);
                    str = reader.readLine();
                }
                return new JSONObject(jsonStr.toString());
            } catch (IOException | JSONException e) {
                LogUtil.e(TAG, e.getMessage());
                e.printStackTrace();
            }
        } else if (params.startsWith("--json")) {
            String[] cmdAndParams = resolveCmdAndParams(params);
            if (cmdAndParams == null) {
                LogUtil.e(TAG, "Invalid parameters: No JSON file specified.");
                return null;
            }
            String jsonStr = cmdAndParams[1];
            if (jsonStr == null) {
                LogUtil.e(TAG, "Invalid parameters: No JSON file specified.");
                return null;
            }
            try {
                return new JSONObject(jsonStr);
            } catch (JSONException e) {
                LogUtil.e(TAG, e.getMessage());
                e.printStackTrace();
            }
        } else {
            boolean hasSpace = Pattern.matches("\\s", params);
            JSONObject json = new JSONObject();
            if (hasSpace) {
                try {
                    String[] parsedParamsArray = params.split("\\s");
                    for (int i = 0; i < parsedParamsArray.length; ++i) {
                        if (parsedParamsArray[i].startsWith("-") ||
                                parsedParamsArray[i].startsWith("--")) {
                            if (i + 1 == parsedParamsArray.length ||
                                    parsedParamsArray[i + 1].startsWith("-")) {
                                json.put(parsedParamsArray[i], true);
                            } else if (!parsedParamsArray[i + 1].startsWith("-")) {
                                json.put(parsedParamsArray[i], parsedParamsArray[i + 1]);
                            }
                        }
                    }
                    return json;
                } catch (JSONException e) {
                    LogUtil.e(TAG, e.getMessage());
                    e.printStackTrace();
                }
            } else {
                try {
                    json.put("default", params);
                    return json;
                } catch (JSONException e) {
                    LogUtil.e(TAG, e.getMessage());
                    e.printStackTrace();
                }
            }
        }
        return null;
    }
}
